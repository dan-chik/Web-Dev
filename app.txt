cart.component.html:
<h3>Cart</h3>

<p>
  <a routerLink="/shipping">Shipping Prices</a>
</p>

<div class="cart-item" *ngFor="let item of items">
  <span>{{ item.name }}</span>
  <span>{{ item.price | currency }}</span>
</div>

<form [formGroup]="checkoutForm" (ngSubmit)="onSubmit()">

  <div>
    <label for="name">
      Name
    </label>
    <input id="name" type="text" formControlName="name">
  </div>

  <div>
    <label for="address">
      Address
    </label>
    <input id="address" type="text" formControlName="address">
  </div>
  
  <button class="button" type="submit">Purchase</button>

</form>
-----------------------------------------------------------------
cart.component.ts:
import { Component } from '@angular/core';
import { FormBuilder } from '@angular/forms';

import { CartService } from '../cart.service';

@Component({
  selector: 'app-cart',
  templateUrl: './cart.component.html',
  styleUrl: './cart.component.css'
})
export class CartComponent {

  items = this.cartService.getItems();
  
  checkoutForm = this.formBuilder.group({
    name: '',
    address: ''
  });

  constructor(
    private cartService: CartService,
    private formBuilder: FormBuilder,
  ){}

  onSubmit(): void {
    // Process checkout data here
    this.items = this.cartService.clearCart();
    console.warn('Your order has been submitted', this.checkoutForm.value);
    this.checkoutForm.reset();
  }
}
-----------------------------------------------------------------
product-details.component.html:
<h2>Product Details</h2>

<div *ngIf="product" class="product-details">
  <div class="product-image">
    <img [src]="product.image" alt="{{ product.name }} Image">
  </div>

  <div class="product-description">
    <h3>{{ product.name }}</h3>
    <h4>{{ product.price | currency }}</h4>
    <p>{{ product.description }}</p>
  </div>

  <!-- Link to Kaspi.kz -->
  <a href="{{ product.kaspiLink }}" target="_blank">View on Kaspi.kz</a>
  
  <button type="button" (click)="addToCart(product)">Buy</button>
</div>
-----------------------------------------------------------------
product-list.html:
<h2>Products</h2>

<div *ngFor="let product of products">

  <h3>
    <a 
      [title]="product.name + ' details'"
      [routerLink]="['/products', product.id]">
      {{ product.name }}
    </a>
  </h3>

  <p *ngIf="product.description">
    Description: {{ product.description }}
  </p>

  <button type="button" (click)="share()">
    Share
  </button>

  <app-product-alerts
    [product]="product"
    (notify)="onNotify()">
  </app-product-alerts>

</div>
-----------------------------------------------------------------
product-list.ts:
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';

import { Product, products } from '../products';
import { CartService } from '../cart.service';

@Component({
  selector: 'app-product-details',
  templateUrl: './product-details.component.html',
  styleUrl: './product-details.component.css'
})
export class ProductDetailsComponent implements OnInit {

  product: Product | undefined;

  addToCart(product: Product) {
    this.cartService.addToCart(product);
    window.alert('Your product has been added to the cart!');
  }
  
  constructor(
    private route: ActivatedRoute,
    private cartService: CartService
  ) { }

  ngOnInit() {
    // First get the product id from the current route.
    const routeParams = this.route.snapshot.paramMap;
    const productIdFromRoute = Number(routeParams.get('productId'));
  
    // Find the product that correspond with the id provided in route.
    this.product = products.find(product => product.id === productIdFromRoute);
  }
}

-----------------------------------------------------------------
shipping.component.html:
<h3>Shipping Prices</h3>

<div class="shipping-item" *ngFor="let shipping of shippingCosts | async">
  <span>{{ shipping.type }}</span>
  <span>{{ shipping.price | currency }}</span>
</div>
shipping.component.ts:
import { Component, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { CartService } from '../cart.service';

@Component({
  selector: 'app-shipping',
  templateUrl: './shipping.component.html',
  styleUrl: './shipping.component.css'
})
export class ShippingComponent implements OnInit{

  constructor(private cartService: CartService) { }
  
  shippingCosts!: Observable<{ type: string, price: number }[]>;

  ngOnInit(): void {
    this.shippingCosts =  this.cartService.getShippingPrices();
  }
}
-----------------------------------------------------------------
top-bar.component.html:
<a [routerLink]="['/']">
    <h1>My Store</h1>
</a>

<a routerLink="/cart" class="button fancy-button">
    <em class="material-icons">shopping_cart</em>Checkout
</a>
top-bar.component.ts:
import { Component } from '@angular/core';

@Component({
  selector: 'app-top-bar',
  templateUrl: './top-bar.component.html',
  styleUrl: './top-bar.component.css'
})
export class TopBarComponent {

}
-----------------------------------------------------------------
app.component.html:
<app-top-bar></app-top-bar>

<div class="container">
  <app-product-list></app-product-list>
</div>
-----------------------------------------------------------------
app.module.ts:
import { NgModule } from '@angular/core';
import { BrowserModule, provideClientHydration } from '@angular/platform-browser';
import { RouterModule } from '@angular/router';
import { ReactiveFormsModule } from '@angular/forms';

import { HttpClientModule } from '@angular/common/http';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { ProductListComponent } from './product-list/product-list.component';
import { TopBarComponent } from './top-bar/top-bar.component';
import { ProductAlertsComponent } from './product-alerts/product-alerts.component';
import { ProductDetailsComponent } from './product-details/product-details.component';
import { CartComponent } from './cart/cart.component';
import { ShippingComponent } from './shipping/shipping.component';
import { ProductItemComponent } from './product-item/product-item.component';

@NgModule({
  declarations: [
    AppComponent,
    TopBarComponent,
    ProductListComponent,
    ProductAlertsComponent,
    ProductDetailsComponent,
    CartComponent,
    ShippingComponent,
    ProductItemComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    AppRoutingModule,
    ReactiveFormsModule,
    RouterModule.forRoot([
      { path: '', component: ProductListComponent },
      { path: 'products/:productId', component: ProductDetailsComponent },
      { path: 'cart', component: CartComponent },
      { path: 'shipping', component: ShippingComponent },
    ])
  ],
  providers: [
    provideClientHydration()
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }

-----------------------------------------------------------------
products.ts:
export interface Product {
    id: number;
    name: string;
    price: number;
    description: string;
    image: string;
    rating: number;
    kaspiLink: string;
    likes: number;
    category: string;
}

export const products = [
    {
      id: 1,
      name: 'Серьги Золото России',
      price: 301930,
      description: 'желтое золото с бриллиантовой ставкой',
      image: '/assets/1.jpg',
      rating: 4.5,
      kaspiLink: 'https://kaspi.kz/shop/p/ser-gi-zoloto-rossii-j312-6721-ves-2-9-g-zoloto-brilliant-116270151/?c=750000000&ref=shared_link',
      likes: 10,
      category: 'Earings',
    },
    {
      id: 2,
      name: 'Кольцо IMPERIAL',
      price: 560400,
      description: 'размер 16.5 вес 3.05 г золото, бриллиант',
      image: '/assets/2.jpg',
      rating: 4.8,
      kaspiLink: 'https://kaspi.kz/shop/p/imperial-k0258-220-razmer-16-5-ves-3-05-g-zoloto-brilliant-109848616/?c=750000000&ref=shared_link',
      likes: 10,
      category: 'Ring',
    },
    {
      id: 3,
      name: 'Конго Saniya Gold',
      price: 359000,
      description: 'вес 8.97 г золотоб bез вставок',
      image: '/assets/3.jpg',
      rating: 3.2,
      kaspiLink: 'https://kaspi.kz/shop/p/kongo-saniya-gold-450349-ves-8-97-g-zoloto-bez-vstavok-116571386/?c=750000000&ref=shared_link',
      likes: 10,
      category: 'Earings',
    },
    {
      id: 4,
      name: 'Цепь Золото России',
      price: 116000,
      description: 'длина 55 см, вес 4.23 г золото, плетение бисмарк',
      image: '/assets/4.jpg',
      rating: 2.2,
      kaspiLink: 'https://kaspi.kz/shop/p/zoloto-rossii-570007023-dlina-55-sm-ves-4-23-g-zoloto-pletenie-bismark-108406609/?c=750000000&ref=shared_link',
      likes: 0,
      category: 'Necklace',
    },
    {
      id: 5,
      name: 'Цепь Qulan',
      price: 235000,
      description: 'длина 55 см, вес 6.13 г золото, плетение гарибальди',
      image: '/assets/5.jpg',
      rating: 4.2,
      kaspiLink: 'https://kaspi.kz/shop/p/qulan-230657sk-dlina-55-sm-ves-6-13-g-zoloto-pletenie-garibal-di-106268152/?c=750000000&ref=shared_link',
      likes: 0,
      category: 'Bracelet',
    },
    {
      id: 6,
      name: 'Кольцо ASSOS',
      price: 116000,
      description: 'размер 16.5 вес 2.19 г золото, без вставок',
      image: '/assets/6.jpg',
      rating: 3.3,
      kaspiLink: 'https://kaspi.kz/shop/p/assos-0031094303521-razmer-16-5-ves-2-19-g-zoloto-bez-vstavok-114208893/?c=750000000&ref=shared_link',
      likes: 0,
      category: 'Ring',
    },
    {
      id: 7,
      name: 'Кольцо АЛЬКОР',
      price: 359000,
      description: 'размер 16 вес 0.94 г золото, бриллиант',
      image: '/assets/7.jpg',
      rating: 3.2,
      kaspiLink: 'https://kaspi.kz/shop/p/al-kor-11712-100-razmer-16-ves-0-94-g-zoloto-brilliant-116305015/?c=750000000&ref=shared_link',
      likes: 0,
      category: 'Ring',
    },
    {
      id: 8,
      name: 'Кольцо Санис',
      price: 80600,
      description: 'размер 15.5 вес 1.24 г золото, фианит',
      image: '/assets/8.jpg',
      rating: 4.4,
      kaspiLink: 'https://kaspi.kz/shop/p/sanis-01-115221-razmer-15-5-ves-1-24-g-zoloto-fianit-116333826/?c=750000000&ref=shared_link',
      likes: 0,
      category: 'Ring',
    },
    {
      id: 9,
      name: 'Серьги Saniya Gold LEONARDO',
      price: 203000,
      description: 'вес 5.81 г золото, без вставок',
      image: '/assets/9.jpg',
      rating: 4.1,
      kaspiLink: 'https://kaspi.kz/shop/p/ser-gi-saniya-gold-leonardo-ves-5-81-g-zoloto-bez-vstavok-116243612/?c=750000000&ref=shared_link',
      likes: 0,
      category: 'Earings',
    },
    {
      id: 10,
      name: 'Серьги ADEMA GOLD',
      price: 359000,
      description: 'вес 3.69 г золото, без вставок',
      image: '/assets/10.jpg',
      rating: 3.2,
      kaspiLink: 'https://kaspi.kz/shop/p/ser-gi-adema-gold-75959472-ves-3-69-g-zoloto-bez-vstavok-116572101/?c=750000000&ref=shared_link',
      likes: 0,
      category: 'Earings',
    }
];
---------------------------------------------------------------------------------------
product-item.component.html
<div *ngIf="product">
    <h3>{{ product.name }}</h3>
    <p>{{ product.description }}</p>
    <p>Price: {{ product.price | currency }}</p>
    <p>Likes: {{ product.likes }}</p>

    <div class="product-actions">
        <button (click)="onLike()">Like</button>
        <button (click)="onAddToCart()">Add to Cart</button>
        <button (click)="onRemove()">Remove</button>
    </div>
</div>
-------------------------------------------------------------------
product-item.component.ts
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Product } from '../products';
import { CartService } from '../cart.service';

@Component({
  selector: 'app-product-item',
  templateUrl: './product-item.component.html',
  styleUrl: './product-item.component.css'
})
export class ProductItemComponent {
  @Input() product: Product | undefined;
  @Output() removeProduct = new EventEmitter<Product>();

  constructor(private cartService: CartService) {}

  onLike(): void {
    if (this.product) {
      this.product.likes += 1;
    }
  }

  onAddToCart(): void {
    if (this.product) {
      this.cartService.addToCart(this.product);
      window.alert('Your product has been added to the cart!');
    }
  }

  onRemove(): void {
    if (this.product) {
      this.removeProduct.emit(this.product);
    }
  }
}



so, firstly, categories selection doesn't work.
secondly, i can't go to other pages like details, cart. thirdly, i don't know why but in product-item box there is two decription texts.


  